
UARTDriver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dcc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001010  08001010  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001010  08001010  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001010  08001010  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001010  08001010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800107c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800107c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001113  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c8  00000000  00000000  000211a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00021670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  000217f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9d8  00000000  00000000  00021918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002033  00000000  00000000  0003c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009015c  00000000  00000000  0003e323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce47f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b28  00000000  00000000  000ce4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f78 	.word	0x08000f78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000f78 	.word	0x08000f78

08000204 <LED_Init>:

#define GPIOA_EN				(1U << 0)
#define LED_PIN					(1U << 5)

void LED_Init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*
	 * Enable clock access to led port
	 */
	RCC -> AHB1ENR |= GPIOA_EN;
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <LED_Init+0x34>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <LED_Init+0x34>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	/*
	 * Set LED Pin as output pin
	 */
	GPIOA -> MODER |= (1U << 10);
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <LED_Init+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <LED_Init+0x38>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 11);
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <LED_Init+0x38>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <LED_Init+0x38>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000

08000240 <main>:
#include "uart.h"
#include <stdio.h>


int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	LED_Init();
 8000244:	f7ff ffde 	bl	8000204 <LED_Init>
	UART_Tx_Init();
 8000248:	f000 f8b6 	bl	80003b8 <UART_Tx_Init>
	while(1)
	{
		printf("Hello from STM32F4 .......\n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <main+0x14>)
 800024e:	f000 fa03 	bl	8000658 <puts>
 8000252:	e7fb      	b.n	800024c <main+0xc>
 8000254:	08000f90 	.word	0x08000f90

08000258 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000264:	2300      	movs	r3, #0
 8000266:	617b      	str	r3, [r7, #20]
 8000268:	e00a      	b.n	8000280 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800026a:	f3af 8000 	nop.w
 800026e:	4601      	mov	r1, r0
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	60ba      	str	r2, [r7, #8]
 8000276:	b2ca      	uxtb	r2, r1
 8000278:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	3301      	adds	r3, #1
 800027e:	617b      	str	r3, [r7, #20]
 8000280:	697a      	ldr	r2, [r7, #20]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	429a      	cmp	r2, r3
 8000286:	dbf0      	blt.n	800026a <_read+0x12>
	}

return len;
 8000288:	687b      	ldr	r3, [r7, #4]
}
 800028a:	4618      	mov	r0, r3
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b086      	sub	sp, #24
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	e009      	b.n	80002b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	60ba      	str	r2, [r7, #8]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f877 	bl	80003a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	3301      	adds	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	429a      	cmp	r2, r3
 80002be:	dbf1      	blt.n	80002a4 <_write+0x12>
	}
	return len;
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <_close>:

int _close(int file)
{
 80002ca:	b480      	push	{r7}
 80002cc:	b083      	sub	sp, #12
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
	return -1;
 80002d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b083      	sub	sp, #12
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
 80002ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002f2:	605a      	str	r2, [r3, #4]
	return 0;
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <_isatty>:

int _isatty(int file)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
	return 1;
 800030a:	2301      	movs	r3, #1
}
 800030c:	4618      	mov	r0, r3
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
	return 0;
 8000324:	2300      	movs	r3, #0
}
 8000326:	4618      	mov	r0, r3
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
	...

08000334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800033c:	4a14      	ldr	r2, [pc, #80]	; (8000390 <_sbrk+0x5c>)
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <_sbrk+0x60>)
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <_sbrk+0x64>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d102      	bne.n	8000356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <_sbrk+0x64>)
 8000352:	4a12      	ldr	r2, [pc, #72]	; (800039c <_sbrk+0x68>)
 8000354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <_sbrk+0x64>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	693a      	ldr	r2, [r7, #16]
 8000360:	429a      	cmp	r2, r3
 8000362:	d207      	bcs.n	8000374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000364:	f000 f8d8 	bl	8000518 <__errno>
 8000368:	4603      	mov	r3, r0
 800036a:	220c      	movs	r2, #12
 800036c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800036e:	f04f 33ff 	mov.w	r3, #4294967295
 8000372:	e009      	b.n	8000388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <_sbrk+0x64>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800037a:	4b07      	ldr	r3, [pc, #28]	; (8000398 <_sbrk+0x64>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4413      	add	r3, r2
 8000382:	4a05      	ldr	r2, [pc, #20]	; (8000398 <_sbrk+0x64>)
 8000384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20020000 	.word	0x20020000
 8000394:	00000400 	.word	0x00000400
 8000398:	20000080 	.word	0x20000080
 800039c:	20000098 	.word	0x20000098

080003a0 <__io_putchar>:
static uint32_t ComputeUart_BR(uint32_t periph_clk, uint32_t baudrate);
static void UartSet_BR(uint32_t periph_clk, uint32_t baudrate);
static void UartWrite(int ch);

int __io_putchar(int ch)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	UartWrite(ch);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f000 f84f 	bl	800044c <UartWrite>
	return ch;
 80003ae:	687b      	ldr	r3, [r7, #4]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <UART_Tx_Init>:

void UART_Tx_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	/*
	 * Enable CLock access to GPIO A
	 */
	RCC -> AHB1ENR |= GPIOA_EN;
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <UART_Tx_Init+0x84>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a1e      	ldr	r2, [pc, #120]	; (800043c <UART_Tx_Init+0x84>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30

	/*
	 * Set PA2 mode to alternate functionality mode
	 */
	GPIOA -> MODER &= ~(1U << 4);
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <UART_Tx_Init+0x88>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <UART_Tx_Init+0x88>)
 80003ce:	f023 0310 	bic.w	r3, r3, #16
 80003d2:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (1U << 5);
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <UART_Tx_Init+0x88>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a19      	ldr	r2, [pc, #100]	; (8000440 <UART_Tx_Init+0x88>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6013      	str	r3, [r2, #0]

	/*
	 * Set Alternate function type to AF7 (UART2_TX)
	 */
	GPIOA -> AFR[0] |= (1U << 8);
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <UART_Tx_Init+0x88>)
 80003e2:	6a1b      	ldr	r3, [r3, #32]
 80003e4:	4a16      	ldr	r2, [pc, #88]	; (8000440 <UART_Tx_Init+0x88>)
 80003e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ea:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 9);
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <UART_Tx_Init+0x88>)
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	4a13      	ldr	r2, [pc, #76]	; (8000440 <UART_Tx_Init+0x88>)
 80003f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f6:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (1U << 10);
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <UART_Tx_Init+0x88>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <UART_Tx_Init+0x88>)
 80003fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000402:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);
 8000404:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <UART_Tx_Init+0x88>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <UART_Tx_Init+0x88>)
 800040a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800040e:	6213      	str	r3, [r2, #32]

	/*
	 * Enable clock access to UART
	 */
	RCC -> APB1ENR |= UART2_EN;
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <UART_Tx_Init+0x84>)
 8000412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <UART_Tx_Init+0x84>)
 8000416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800041a:	6413      	str	r3, [r2, #64]	; 0x40

	/*
	 * Configure Baud Rate
	 */
	UartSet_BR(APB1_CLK, UART_BAUDRATE);
 800041c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000420:	4808      	ldr	r0, [pc, #32]	; (8000444 <UART_Tx_Init+0x8c>)
 8000422:	f000 f82b 	bl	800047c <UartSet_BR>

	/*
	 * Configure Transfer Direction
	 */
	USART2 -> CR1 = CR1_TE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <UART_Tx_Init+0x90>)
 8000428:	2208      	movs	r2, #8
 800042a:	60da      	str	r2, [r3, #12]

	/*
	 * Enable UART Module
	 */
	USART2 -> CR1 |= CR1_UE;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <UART_Tx_Init+0x90>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a05      	ldr	r2, [pc, #20]	; (8000448 <UART_Tx_Init+0x90>)
 8000432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000436:	60d3      	str	r3, [r2, #12]

}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40023800 	.word	0x40023800
 8000440:	40020000 	.word	0x40020000
 8000444:	00f42400 	.word	0x00f42400
 8000448:	40004400 	.word	0x40004400

0800044c <UartWrite>:

static void UartWrite(int ch)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	/*
	 * Make sure the transmit data register is empty
	 */
	while(!(USART2 -> SR & SR_TXE));
 8000454:	bf00      	nop
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <UartWrite+0x2c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <UartWrite+0xa>
	/*
	 * Write to transmit data register
	 */
	USART2 -> DR = (ch & 0xFF);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <UartWrite+0x2c>)
 8000466:	b2db      	uxtb	r3, r3
 8000468:	6053      	str	r3, [r2, #4]


}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40004400 	.word	0x40004400

0800047c <UartSet_BR>:

static void UartSet_BR(uint32_t periph_clk, uint32_t baudrate)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = ComputeUart_BR(periph_clk, baudrate);
 8000486:	4c05      	ldr	r4, [pc, #20]	; (800049c <UartSet_BR+0x20>)
 8000488:	6839      	ldr	r1, [r7, #0]
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f808 	bl	80004a0 <ComputeUart_BR>
 8000490:	4603      	mov	r3, r0
 8000492:	60a3      	str	r3, [r4, #8]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bd90      	pop	{r4, r7, pc}
 800049c:	40004400 	.word	0x40004400

080004a0 <ComputeUart_BR>:

static uint32_t ComputeUart_BR(uint32_t periph_clk, uint32_t baudrate)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U)/baudrate));
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	085a      	lsrs	r2, r3, #1
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4413      	add	r3, r2
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	480d      	ldr	r0, [pc, #52]	; (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	; (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	; (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f000 f817 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff fea3 	bl	8000240 <main>

080004fa <LoopForever>:

LoopForever:
    b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   r0, =_estack
 80004fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000508:	08001018 	.word	0x08001018
  ldr r2, =_sbss
 800050c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000510:	20000094 	.word	0x20000094

08000514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_IRQHandler>
	...

08000518 <__errno>:
 8000518:	4b01      	ldr	r3, [pc, #4]	; (8000520 <__errno+0x8>)
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4d0d      	ldr	r5, [pc, #52]	; (800055c <__libc_init_array+0x38>)
 8000528:	4c0d      	ldr	r4, [pc, #52]	; (8000560 <__libc_init_array+0x3c>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	2600      	movs	r6, #0
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	4d0b      	ldr	r5, [pc, #44]	; (8000564 <__libc_init_array+0x40>)
 8000536:	4c0c      	ldr	r4, [pc, #48]	; (8000568 <__libc_init_array+0x44>)
 8000538:	f000 fd1e 	bl	8000f78 <_init>
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	2600      	movs	r6, #0
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08001010 	.word	0x08001010
 8000560:	08001010 	.word	0x08001010
 8000564:	08001010 	.word	0x08001010
 8000568:	08001014 	.word	0x08001014

0800056c <memset>:
 800056c:	4402      	add	r2, r0
 800056e:	4603      	mov	r3, r0
 8000570:	4293      	cmp	r3, r2
 8000572:	d100      	bne.n	8000576 <memset+0xa>
 8000574:	4770      	bx	lr
 8000576:	f803 1b01 	strb.w	r1, [r3], #1
 800057a:	e7f9      	b.n	8000570 <memset+0x4>

0800057c <_puts_r>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	460e      	mov	r6, r1
 8000580:	4605      	mov	r5, r0
 8000582:	b118      	cbz	r0, 800058c <_puts_r+0x10>
 8000584:	6983      	ldr	r3, [r0, #24]
 8000586:	b90b      	cbnz	r3, 800058c <_puts_r+0x10>
 8000588:	f000 fa48 	bl	8000a1c <__sinit>
 800058c:	69ab      	ldr	r3, [r5, #24]
 800058e:	68ac      	ldr	r4, [r5, #8]
 8000590:	b913      	cbnz	r3, 8000598 <_puts_r+0x1c>
 8000592:	4628      	mov	r0, r5
 8000594:	f000 fa42 	bl	8000a1c <__sinit>
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <_puts_r+0xd0>)
 800059a:	429c      	cmp	r4, r3
 800059c:	d120      	bne.n	80005e0 <_puts_r+0x64>
 800059e:	686c      	ldr	r4, [r5, #4]
 80005a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005a2:	07db      	lsls	r3, r3, #31
 80005a4:	d405      	bmi.n	80005b2 <_puts_r+0x36>
 80005a6:	89a3      	ldrh	r3, [r4, #12]
 80005a8:	0598      	lsls	r0, r3, #22
 80005aa:	d402      	bmi.n	80005b2 <_puts_r+0x36>
 80005ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005ae:	f000 fad3 	bl	8000b58 <__retarget_lock_acquire_recursive>
 80005b2:	89a3      	ldrh	r3, [r4, #12]
 80005b4:	0719      	lsls	r1, r3, #28
 80005b6:	d51d      	bpl.n	80005f4 <_puts_r+0x78>
 80005b8:	6923      	ldr	r3, [r4, #16]
 80005ba:	b1db      	cbz	r3, 80005f4 <_puts_r+0x78>
 80005bc:	3e01      	subs	r6, #1
 80005be:	68a3      	ldr	r3, [r4, #8]
 80005c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005c4:	3b01      	subs	r3, #1
 80005c6:	60a3      	str	r3, [r4, #8]
 80005c8:	bb39      	cbnz	r1, 800061a <_puts_r+0x9e>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da38      	bge.n	8000640 <_puts_r+0xc4>
 80005ce:	4622      	mov	r2, r4
 80005d0:	210a      	movs	r1, #10
 80005d2:	4628      	mov	r0, r5
 80005d4:	f000 f848 	bl	8000668 <__swbuf_r>
 80005d8:	3001      	adds	r0, #1
 80005da:	d011      	beq.n	8000600 <_puts_r+0x84>
 80005dc:	250a      	movs	r5, #10
 80005de:	e011      	b.n	8000604 <_puts_r+0x88>
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <_puts_r+0xd4>)
 80005e2:	429c      	cmp	r4, r3
 80005e4:	d101      	bne.n	80005ea <_puts_r+0x6e>
 80005e6:	68ac      	ldr	r4, [r5, #8]
 80005e8:	e7da      	b.n	80005a0 <_puts_r+0x24>
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <_puts_r+0xd8>)
 80005ec:	429c      	cmp	r4, r3
 80005ee:	bf08      	it	eq
 80005f0:	68ec      	ldreq	r4, [r5, #12]
 80005f2:	e7d5      	b.n	80005a0 <_puts_r+0x24>
 80005f4:	4621      	mov	r1, r4
 80005f6:	4628      	mov	r0, r5
 80005f8:	f000 f888 	bl	800070c <__swsetup_r>
 80005fc:	2800      	cmp	r0, #0
 80005fe:	d0dd      	beq.n	80005bc <_puts_r+0x40>
 8000600:	f04f 35ff 	mov.w	r5, #4294967295
 8000604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000606:	07da      	lsls	r2, r3, #31
 8000608:	d405      	bmi.n	8000616 <_puts_r+0x9a>
 800060a:	89a3      	ldrh	r3, [r4, #12]
 800060c:	059b      	lsls	r3, r3, #22
 800060e:	d402      	bmi.n	8000616 <_puts_r+0x9a>
 8000610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000612:	f000 faa2 	bl	8000b5a <__retarget_lock_release_recursive>
 8000616:	4628      	mov	r0, r5
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	2b00      	cmp	r3, #0
 800061c:	da04      	bge.n	8000628 <_puts_r+0xac>
 800061e:	69a2      	ldr	r2, [r4, #24]
 8000620:	429a      	cmp	r2, r3
 8000622:	dc06      	bgt.n	8000632 <_puts_r+0xb6>
 8000624:	290a      	cmp	r1, #10
 8000626:	d004      	beq.n	8000632 <_puts_r+0xb6>
 8000628:	6823      	ldr	r3, [r4, #0]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	6022      	str	r2, [r4, #0]
 800062e:	7019      	strb	r1, [r3, #0]
 8000630:	e7c5      	b.n	80005be <_puts_r+0x42>
 8000632:	4622      	mov	r2, r4
 8000634:	4628      	mov	r0, r5
 8000636:	f000 f817 	bl	8000668 <__swbuf_r>
 800063a:	3001      	adds	r0, #1
 800063c:	d1bf      	bne.n	80005be <_puts_r+0x42>
 800063e:	e7df      	b.n	8000600 <_puts_r+0x84>
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	250a      	movs	r5, #10
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	6022      	str	r2, [r4, #0]
 8000648:	701d      	strb	r5, [r3, #0]
 800064a:	e7db      	b.n	8000604 <_puts_r+0x88>
 800064c:	08000fd0 	.word	0x08000fd0
 8000650:	08000ff0 	.word	0x08000ff0
 8000654:	08000fb0 	.word	0x08000fb0

08000658 <puts>:
 8000658:	4b02      	ldr	r3, [pc, #8]	; (8000664 <puts+0xc>)
 800065a:	4601      	mov	r1, r0
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	f7ff bf8d 	b.w	800057c <_puts_r>
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <__swbuf_r>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	460e      	mov	r6, r1
 800066c:	4614      	mov	r4, r2
 800066e:	4605      	mov	r5, r0
 8000670:	b118      	cbz	r0, 800067a <__swbuf_r+0x12>
 8000672:	6983      	ldr	r3, [r0, #24]
 8000674:	b90b      	cbnz	r3, 800067a <__swbuf_r+0x12>
 8000676:	f000 f9d1 	bl	8000a1c <__sinit>
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <__swbuf_r+0x98>)
 800067c:	429c      	cmp	r4, r3
 800067e:	d12b      	bne.n	80006d8 <__swbuf_r+0x70>
 8000680:	686c      	ldr	r4, [r5, #4]
 8000682:	69a3      	ldr	r3, [r4, #24]
 8000684:	60a3      	str	r3, [r4, #8]
 8000686:	89a3      	ldrh	r3, [r4, #12]
 8000688:	071a      	lsls	r2, r3, #28
 800068a:	d52f      	bpl.n	80006ec <__swbuf_r+0x84>
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	b36b      	cbz	r3, 80006ec <__swbuf_r+0x84>
 8000690:	6923      	ldr	r3, [r4, #16]
 8000692:	6820      	ldr	r0, [r4, #0]
 8000694:	1ac0      	subs	r0, r0, r3
 8000696:	6963      	ldr	r3, [r4, #20]
 8000698:	b2f6      	uxtb	r6, r6
 800069a:	4283      	cmp	r3, r0
 800069c:	4637      	mov	r7, r6
 800069e:	dc04      	bgt.n	80006aa <__swbuf_r+0x42>
 80006a0:	4621      	mov	r1, r4
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 f926 	bl	80008f4 <_fflush_r>
 80006a8:	bb30      	cbnz	r0, 80006f8 <__swbuf_r+0x90>
 80006aa:	68a3      	ldr	r3, [r4, #8]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	60a3      	str	r3, [r4, #8]
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	6022      	str	r2, [r4, #0]
 80006b6:	701e      	strb	r6, [r3, #0]
 80006b8:	6963      	ldr	r3, [r4, #20]
 80006ba:	3001      	adds	r0, #1
 80006bc:	4283      	cmp	r3, r0
 80006be:	d004      	beq.n	80006ca <__swbuf_r+0x62>
 80006c0:	89a3      	ldrh	r3, [r4, #12]
 80006c2:	07db      	lsls	r3, r3, #31
 80006c4:	d506      	bpl.n	80006d4 <__swbuf_r+0x6c>
 80006c6:	2e0a      	cmp	r6, #10
 80006c8:	d104      	bne.n	80006d4 <__swbuf_r+0x6c>
 80006ca:	4621      	mov	r1, r4
 80006cc:	4628      	mov	r0, r5
 80006ce:	f000 f911 	bl	80008f4 <_fflush_r>
 80006d2:	b988      	cbnz	r0, 80006f8 <__swbuf_r+0x90>
 80006d4:	4638      	mov	r0, r7
 80006d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <__swbuf_r+0x9c>)
 80006da:	429c      	cmp	r4, r3
 80006dc:	d101      	bne.n	80006e2 <__swbuf_r+0x7a>
 80006de:	68ac      	ldr	r4, [r5, #8]
 80006e0:	e7cf      	b.n	8000682 <__swbuf_r+0x1a>
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <__swbuf_r+0xa0>)
 80006e4:	429c      	cmp	r4, r3
 80006e6:	bf08      	it	eq
 80006e8:	68ec      	ldreq	r4, [r5, #12]
 80006ea:	e7ca      	b.n	8000682 <__swbuf_r+0x1a>
 80006ec:	4621      	mov	r1, r4
 80006ee:	4628      	mov	r0, r5
 80006f0:	f000 f80c 	bl	800070c <__swsetup_r>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d0cb      	beq.n	8000690 <__swbuf_r+0x28>
 80006f8:	f04f 37ff 	mov.w	r7, #4294967295
 80006fc:	e7ea      	b.n	80006d4 <__swbuf_r+0x6c>
 80006fe:	bf00      	nop
 8000700:	08000fd0 	.word	0x08000fd0
 8000704:	08000ff0 	.word	0x08000ff0
 8000708:	08000fb0 	.word	0x08000fb0

0800070c <__swsetup_r>:
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <__swsetup_r+0xcc>)
 800070e:	b570      	push	{r4, r5, r6, lr}
 8000710:	681d      	ldr	r5, [r3, #0]
 8000712:	4606      	mov	r6, r0
 8000714:	460c      	mov	r4, r1
 8000716:	b125      	cbz	r5, 8000722 <__swsetup_r+0x16>
 8000718:	69ab      	ldr	r3, [r5, #24]
 800071a:	b913      	cbnz	r3, 8000722 <__swsetup_r+0x16>
 800071c:	4628      	mov	r0, r5
 800071e:	f000 f97d 	bl	8000a1c <__sinit>
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <__swsetup_r+0xd0>)
 8000724:	429c      	cmp	r4, r3
 8000726:	d10f      	bne.n	8000748 <__swsetup_r+0x3c>
 8000728:	686c      	ldr	r4, [r5, #4]
 800072a:	89a3      	ldrh	r3, [r4, #12]
 800072c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000730:	0719      	lsls	r1, r3, #28
 8000732:	d42c      	bmi.n	800078e <__swsetup_r+0x82>
 8000734:	06dd      	lsls	r5, r3, #27
 8000736:	d411      	bmi.n	800075c <__swsetup_r+0x50>
 8000738:	2309      	movs	r3, #9
 800073a:	6033      	str	r3, [r6, #0]
 800073c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000740:	81a3      	strh	r3, [r4, #12]
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	e03e      	b.n	80007c6 <__swsetup_r+0xba>
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <__swsetup_r+0xd4>)
 800074a:	429c      	cmp	r4, r3
 800074c:	d101      	bne.n	8000752 <__swsetup_r+0x46>
 800074e:	68ac      	ldr	r4, [r5, #8]
 8000750:	e7eb      	b.n	800072a <__swsetup_r+0x1e>
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <__swsetup_r+0xd8>)
 8000754:	429c      	cmp	r4, r3
 8000756:	bf08      	it	eq
 8000758:	68ec      	ldreq	r4, [r5, #12]
 800075a:	e7e6      	b.n	800072a <__swsetup_r+0x1e>
 800075c:	0758      	lsls	r0, r3, #29
 800075e:	d512      	bpl.n	8000786 <__swsetup_r+0x7a>
 8000760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000762:	b141      	cbz	r1, 8000776 <__swsetup_r+0x6a>
 8000764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000768:	4299      	cmp	r1, r3
 800076a:	d002      	beq.n	8000772 <__swsetup_r+0x66>
 800076c:	4630      	mov	r0, r6
 800076e:	f000 fa5b 	bl	8000c28 <_free_r>
 8000772:	2300      	movs	r3, #0
 8000774:	6363      	str	r3, [r4, #52]	; 0x34
 8000776:	89a3      	ldrh	r3, [r4, #12]
 8000778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800077c:	81a3      	strh	r3, [r4, #12]
 800077e:	2300      	movs	r3, #0
 8000780:	6063      	str	r3, [r4, #4]
 8000782:	6923      	ldr	r3, [r4, #16]
 8000784:	6023      	str	r3, [r4, #0]
 8000786:	89a3      	ldrh	r3, [r4, #12]
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	81a3      	strh	r3, [r4, #12]
 800078e:	6923      	ldr	r3, [r4, #16]
 8000790:	b94b      	cbnz	r3, 80007a6 <__swsetup_r+0x9a>
 8000792:	89a3      	ldrh	r3, [r4, #12]
 8000794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800079c:	d003      	beq.n	80007a6 <__swsetup_r+0x9a>
 800079e:	4621      	mov	r1, r4
 80007a0:	4630      	mov	r0, r6
 80007a2:	f000 fa01 	bl	8000ba8 <__smakebuf_r>
 80007a6:	89a0      	ldrh	r0, [r4, #12]
 80007a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007ac:	f010 0301 	ands.w	r3, r0, #1
 80007b0:	d00a      	beq.n	80007c8 <__swsetup_r+0xbc>
 80007b2:	2300      	movs	r3, #0
 80007b4:	60a3      	str	r3, [r4, #8]
 80007b6:	6963      	ldr	r3, [r4, #20]
 80007b8:	425b      	negs	r3, r3
 80007ba:	61a3      	str	r3, [r4, #24]
 80007bc:	6923      	ldr	r3, [r4, #16]
 80007be:	b943      	cbnz	r3, 80007d2 <__swsetup_r+0xc6>
 80007c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007c4:	d1ba      	bne.n	800073c <__swsetup_r+0x30>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	0781      	lsls	r1, r0, #30
 80007ca:	bf58      	it	pl
 80007cc:	6963      	ldrpl	r3, [r4, #20]
 80007ce:	60a3      	str	r3, [r4, #8]
 80007d0:	e7f4      	b.n	80007bc <__swsetup_r+0xb0>
 80007d2:	2000      	movs	r0, #0
 80007d4:	e7f7      	b.n	80007c6 <__swsetup_r+0xba>
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	08000fd0 	.word	0x08000fd0
 80007e0:	08000ff0 	.word	0x08000ff0
 80007e4:	08000fb0 	.word	0x08000fb0

080007e8 <__sflush_r>:
 80007e8:	898a      	ldrh	r2, [r1, #12]
 80007ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ee:	4605      	mov	r5, r0
 80007f0:	0710      	lsls	r0, r2, #28
 80007f2:	460c      	mov	r4, r1
 80007f4:	d458      	bmi.n	80008a8 <__sflush_r+0xc0>
 80007f6:	684b      	ldr	r3, [r1, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc05      	bgt.n	8000808 <__sflush_r+0x20>
 80007fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dc02      	bgt.n	8000808 <__sflush_r+0x20>
 8000802:	2000      	movs	r0, #0
 8000804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800080a:	2e00      	cmp	r6, #0
 800080c:	d0f9      	beq.n	8000802 <__sflush_r+0x1a>
 800080e:	2300      	movs	r3, #0
 8000810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000814:	682f      	ldr	r7, [r5, #0]
 8000816:	602b      	str	r3, [r5, #0]
 8000818:	d032      	beq.n	8000880 <__sflush_r+0x98>
 800081a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800081c:	89a3      	ldrh	r3, [r4, #12]
 800081e:	075a      	lsls	r2, r3, #29
 8000820:	d505      	bpl.n	800082e <__sflush_r+0x46>
 8000822:	6863      	ldr	r3, [r4, #4]
 8000824:	1ac0      	subs	r0, r0, r3
 8000826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000828:	b10b      	cbz	r3, 800082e <__sflush_r+0x46>
 800082a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800082c:	1ac0      	subs	r0, r0, r3
 800082e:	2300      	movs	r3, #0
 8000830:	4602      	mov	r2, r0
 8000832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000834:	6a21      	ldr	r1, [r4, #32]
 8000836:	4628      	mov	r0, r5
 8000838:	47b0      	blx	r6
 800083a:	1c43      	adds	r3, r0, #1
 800083c:	89a3      	ldrh	r3, [r4, #12]
 800083e:	d106      	bne.n	800084e <__sflush_r+0x66>
 8000840:	6829      	ldr	r1, [r5, #0]
 8000842:	291d      	cmp	r1, #29
 8000844:	d82c      	bhi.n	80008a0 <__sflush_r+0xb8>
 8000846:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <__sflush_r+0x108>)
 8000848:	40ca      	lsrs	r2, r1
 800084a:	07d6      	lsls	r6, r2, #31
 800084c:	d528      	bpl.n	80008a0 <__sflush_r+0xb8>
 800084e:	2200      	movs	r2, #0
 8000850:	6062      	str	r2, [r4, #4]
 8000852:	04d9      	lsls	r1, r3, #19
 8000854:	6922      	ldr	r2, [r4, #16]
 8000856:	6022      	str	r2, [r4, #0]
 8000858:	d504      	bpl.n	8000864 <__sflush_r+0x7c>
 800085a:	1c42      	adds	r2, r0, #1
 800085c:	d101      	bne.n	8000862 <__sflush_r+0x7a>
 800085e:	682b      	ldr	r3, [r5, #0]
 8000860:	b903      	cbnz	r3, 8000864 <__sflush_r+0x7c>
 8000862:	6560      	str	r0, [r4, #84]	; 0x54
 8000864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000866:	602f      	str	r7, [r5, #0]
 8000868:	2900      	cmp	r1, #0
 800086a:	d0ca      	beq.n	8000802 <__sflush_r+0x1a>
 800086c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000870:	4299      	cmp	r1, r3
 8000872:	d002      	beq.n	800087a <__sflush_r+0x92>
 8000874:	4628      	mov	r0, r5
 8000876:	f000 f9d7 	bl	8000c28 <_free_r>
 800087a:	2000      	movs	r0, #0
 800087c:	6360      	str	r0, [r4, #52]	; 0x34
 800087e:	e7c1      	b.n	8000804 <__sflush_r+0x1c>
 8000880:	6a21      	ldr	r1, [r4, #32]
 8000882:	2301      	movs	r3, #1
 8000884:	4628      	mov	r0, r5
 8000886:	47b0      	blx	r6
 8000888:	1c41      	adds	r1, r0, #1
 800088a:	d1c7      	bne.n	800081c <__sflush_r+0x34>
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0c4      	beq.n	800081c <__sflush_r+0x34>
 8000892:	2b1d      	cmp	r3, #29
 8000894:	d001      	beq.n	800089a <__sflush_r+0xb2>
 8000896:	2b16      	cmp	r3, #22
 8000898:	d101      	bne.n	800089e <__sflush_r+0xb6>
 800089a:	602f      	str	r7, [r5, #0]
 800089c:	e7b1      	b.n	8000802 <__sflush_r+0x1a>
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	81a3      	strh	r3, [r4, #12]
 80008a6:	e7ad      	b.n	8000804 <__sflush_r+0x1c>
 80008a8:	690f      	ldr	r7, [r1, #16]
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d0a9      	beq.n	8000802 <__sflush_r+0x1a>
 80008ae:	0793      	lsls	r3, r2, #30
 80008b0:	680e      	ldr	r6, [r1, #0]
 80008b2:	bf08      	it	eq
 80008b4:	694b      	ldreq	r3, [r1, #20]
 80008b6:	600f      	str	r7, [r1, #0]
 80008b8:	bf18      	it	ne
 80008ba:	2300      	movne	r3, #0
 80008bc:	eba6 0807 	sub.w	r8, r6, r7
 80008c0:	608b      	str	r3, [r1, #8]
 80008c2:	f1b8 0f00 	cmp.w	r8, #0
 80008c6:	dd9c      	ble.n	8000802 <__sflush_r+0x1a>
 80008c8:	6a21      	ldr	r1, [r4, #32]
 80008ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008cc:	4643      	mov	r3, r8
 80008ce:	463a      	mov	r2, r7
 80008d0:	4628      	mov	r0, r5
 80008d2:	47b0      	blx	r6
 80008d4:	2800      	cmp	r0, #0
 80008d6:	dc06      	bgt.n	80008e6 <__sflush_r+0xfe>
 80008d8:	89a3      	ldrh	r3, [r4, #12]
 80008da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008de:	81a3      	strh	r3, [r4, #12]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	e78e      	b.n	8000804 <__sflush_r+0x1c>
 80008e6:	4407      	add	r7, r0
 80008e8:	eba8 0800 	sub.w	r8, r8, r0
 80008ec:	e7e9      	b.n	80008c2 <__sflush_r+0xda>
 80008ee:	bf00      	nop
 80008f0:	20400001 	.word	0x20400001

080008f4 <_fflush_r>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	690b      	ldr	r3, [r1, #16]
 80008f8:	4605      	mov	r5, r0
 80008fa:	460c      	mov	r4, r1
 80008fc:	b913      	cbnz	r3, 8000904 <_fflush_r+0x10>
 80008fe:	2500      	movs	r5, #0
 8000900:	4628      	mov	r0, r5
 8000902:	bd38      	pop	{r3, r4, r5, pc}
 8000904:	b118      	cbz	r0, 800090e <_fflush_r+0x1a>
 8000906:	6983      	ldr	r3, [r0, #24]
 8000908:	b90b      	cbnz	r3, 800090e <_fflush_r+0x1a>
 800090a:	f000 f887 	bl	8000a1c <__sinit>
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <_fflush_r+0x6c>)
 8000910:	429c      	cmp	r4, r3
 8000912:	d11b      	bne.n	800094c <_fflush_r+0x58>
 8000914:	686c      	ldr	r4, [r5, #4]
 8000916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0ef      	beq.n	80008fe <_fflush_r+0xa>
 800091e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000920:	07d0      	lsls	r0, r2, #31
 8000922:	d404      	bmi.n	800092e <_fflush_r+0x3a>
 8000924:	0599      	lsls	r1, r3, #22
 8000926:	d402      	bmi.n	800092e <_fflush_r+0x3a>
 8000928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800092a:	f000 f915 	bl	8000b58 <__retarget_lock_acquire_recursive>
 800092e:	4628      	mov	r0, r5
 8000930:	4621      	mov	r1, r4
 8000932:	f7ff ff59 	bl	80007e8 <__sflush_r>
 8000936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000938:	07da      	lsls	r2, r3, #31
 800093a:	4605      	mov	r5, r0
 800093c:	d4e0      	bmi.n	8000900 <_fflush_r+0xc>
 800093e:	89a3      	ldrh	r3, [r4, #12]
 8000940:	059b      	lsls	r3, r3, #22
 8000942:	d4dd      	bmi.n	8000900 <_fflush_r+0xc>
 8000944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000946:	f000 f908 	bl	8000b5a <__retarget_lock_release_recursive>
 800094a:	e7d9      	b.n	8000900 <_fflush_r+0xc>
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <_fflush_r+0x70>)
 800094e:	429c      	cmp	r4, r3
 8000950:	d101      	bne.n	8000956 <_fflush_r+0x62>
 8000952:	68ac      	ldr	r4, [r5, #8]
 8000954:	e7df      	b.n	8000916 <_fflush_r+0x22>
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <_fflush_r+0x74>)
 8000958:	429c      	cmp	r4, r3
 800095a:	bf08      	it	eq
 800095c:	68ec      	ldreq	r4, [r5, #12]
 800095e:	e7da      	b.n	8000916 <_fflush_r+0x22>
 8000960:	08000fd0 	.word	0x08000fd0
 8000964:	08000ff0 	.word	0x08000ff0
 8000968:	08000fb0 	.word	0x08000fb0

0800096c <std>:
 800096c:	2300      	movs	r3, #0
 800096e:	b510      	push	{r4, lr}
 8000970:	4604      	mov	r4, r0
 8000972:	e9c0 3300 	strd	r3, r3, [r0]
 8000976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800097a:	6083      	str	r3, [r0, #8]
 800097c:	8181      	strh	r1, [r0, #12]
 800097e:	6643      	str	r3, [r0, #100]	; 0x64
 8000980:	81c2      	strh	r2, [r0, #14]
 8000982:	6183      	str	r3, [r0, #24]
 8000984:	4619      	mov	r1, r3
 8000986:	2208      	movs	r2, #8
 8000988:	305c      	adds	r0, #92	; 0x5c
 800098a:	f7ff fdef 	bl	800056c <memset>
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <std+0x38>)
 8000990:	6263      	str	r3, [r4, #36]	; 0x24
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <std+0x3c>)
 8000994:	62a3      	str	r3, [r4, #40]	; 0x28
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <std+0x40>)
 8000998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <std+0x44>)
 800099c:	6224      	str	r4, [r4, #32]
 800099e:	6323      	str	r3, [r4, #48]	; 0x30
 80009a0:	bd10      	pop	{r4, pc}
 80009a2:	bf00      	nop
 80009a4:	08000e09 	.word	0x08000e09
 80009a8:	08000e2b 	.word	0x08000e2b
 80009ac:	08000e63 	.word	0x08000e63
 80009b0:	08000e87 	.word	0x08000e87

080009b4 <_cleanup_r>:
 80009b4:	4901      	ldr	r1, [pc, #4]	; (80009bc <_cleanup_r+0x8>)
 80009b6:	f000 b8af 	b.w	8000b18 <_fwalk_reent>
 80009ba:	bf00      	nop
 80009bc:	080008f5 	.word	0x080008f5

080009c0 <__sfmoreglue>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	2268      	movs	r2, #104	; 0x68
 80009c4:	1e4d      	subs	r5, r1, #1
 80009c6:	4355      	muls	r5, r2
 80009c8:	460e      	mov	r6, r1
 80009ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009ce:	f000 f997 	bl	8000d00 <_malloc_r>
 80009d2:	4604      	mov	r4, r0
 80009d4:	b140      	cbz	r0, 80009e8 <__sfmoreglue+0x28>
 80009d6:	2100      	movs	r1, #0
 80009d8:	e9c0 1600 	strd	r1, r6, [r0]
 80009dc:	300c      	adds	r0, #12
 80009de:	60a0      	str	r0, [r4, #8]
 80009e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009e4:	f7ff fdc2 	bl	800056c <memset>
 80009e8:	4620      	mov	r0, r4
 80009ea:	bd70      	pop	{r4, r5, r6, pc}

080009ec <__sfp_lock_acquire>:
 80009ec:	4801      	ldr	r0, [pc, #4]	; (80009f4 <__sfp_lock_acquire+0x8>)
 80009ee:	f000 b8b3 	b.w	8000b58 <__retarget_lock_acquire_recursive>
 80009f2:	bf00      	nop
 80009f4:	20000085 	.word	0x20000085

080009f8 <__sfp_lock_release>:
 80009f8:	4801      	ldr	r0, [pc, #4]	; (8000a00 <__sfp_lock_release+0x8>)
 80009fa:	f000 b8ae 	b.w	8000b5a <__retarget_lock_release_recursive>
 80009fe:	bf00      	nop
 8000a00:	20000085 	.word	0x20000085

08000a04 <__sinit_lock_acquire>:
 8000a04:	4801      	ldr	r0, [pc, #4]	; (8000a0c <__sinit_lock_acquire+0x8>)
 8000a06:	f000 b8a7 	b.w	8000b58 <__retarget_lock_acquire_recursive>
 8000a0a:	bf00      	nop
 8000a0c:	20000086 	.word	0x20000086

08000a10 <__sinit_lock_release>:
 8000a10:	4801      	ldr	r0, [pc, #4]	; (8000a18 <__sinit_lock_release+0x8>)
 8000a12:	f000 b8a2 	b.w	8000b5a <__retarget_lock_release_recursive>
 8000a16:	bf00      	nop
 8000a18:	20000086 	.word	0x20000086

08000a1c <__sinit>:
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4604      	mov	r4, r0
 8000a20:	f7ff fff0 	bl	8000a04 <__sinit_lock_acquire>
 8000a24:	69a3      	ldr	r3, [r4, #24]
 8000a26:	b11b      	cbz	r3, 8000a30 <__sinit+0x14>
 8000a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a2c:	f7ff bff0 	b.w	8000a10 <__sinit_lock_release>
 8000a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a34:	6523      	str	r3, [r4, #80]	; 0x50
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <__sinit+0x68>)
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <__sinit+0x6c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	bf04      	itt	eq
 8000a42:	2301      	moveq	r3, #1
 8000a44:	61a3      	streq	r3, [r4, #24]
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 f820 	bl	8000a8c <__sfp>
 8000a4c:	6060      	str	r0, [r4, #4]
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f000 f81c 	bl	8000a8c <__sfp>
 8000a54:	60a0      	str	r0, [r4, #8]
 8000a56:	4620      	mov	r0, r4
 8000a58:	f000 f818 	bl	8000a8c <__sfp>
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60e0      	str	r0, [r4, #12]
 8000a60:	2104      	movs	r1, #4
 8000a62:	6860      	ldr	r0, [r4, #4]
 8000a64:	f7ff ff82 	bl	800096c <std>
 8000a68:	68a0      	ldr	r0, [r4, #8]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2109      	movs	r1, #9
 8000a6e:	f7ff ff7d 	bl	800096c <std>
 8000a72:	68e0      	ldr	r0, [r4, #12]
 8000a74:	2202      	movs	r2, #2
 8000a76:	2112      	movs	r1, #18
 8000a78:	f7ff ff78 	bl	800096c <std>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61a3      	str	r3, [r4, #24]
 8000a80:	e7d2      	b.n	8000a28 <__sinit+0xc>
 8000a82:	bf00      	nop
 8000a84:	08000fac 	.word	0x08000fac
 8000a88:	080009b5 	.word	0x080009b5

08000a8c <__sfp>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	4607      	mov	r7, r0
 8000a90:	f7ff ffac 	bl	80009ec <__sfp_lock_acquire>
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <__sfp+0x84>)
 8000a96:	681e      	ldr	r6, [r3, #0]
 8000a98:	69b3      	ldr	r3, [r6, #24]
 8000a9a:	b913      	cbnz	r3, 8000aa2 <__sfp+0x16>
 8000a9c:	4630      	mov	r0, r6
 8000a9e:	f7ff ffbd 	bl	8000a1c <__sinit>
 8000aa2:	3648      	adds	r6, #72	; 0x48
 8000aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	d503      	bpl.n	8000ab4 <__sfp+0x28>
 8000aac:	6833      	ldr	r3, [r6, #0]
 8000aae:	b30b      	cbz	r3, 8000af4 <__sfp+0x68>
 8000ab0:	6836      	ldr	r6, [r6, #0]
 8000ab2:	e7f7      	b.n	8000aa4 <__sfp+0x18>
 8000ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ab8:	b9d5      	cbnz	r5, 8000af0 <__sfp+0x64>
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <__sfp+0x88>)
 8000abc:	60e3      	str	r3, [r4, #12]
 8000abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ac2:	6665      	str	r5, [r4, #100]	; 0x64
 8000ac4:	f000 f847 	bl	8000b56 <__retarget_lock_init_recursive>
 8000ac8:	f7ff ff96 	bl	80009f8 <__sfp_lock_release>
 8000acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ad4:	6025      	str	r5, [r4, #0]
 8000ad6:	61a5      	str	r5, [r4, #24]
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4629      	mov	r1, r5
 8000adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ae0:	f7ff fd44 	bl	800056c <memset>
 8000ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000aec:	4620      	mov	r0, r4
 8000aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000af0:	3468      	adds	r4, #104	; 0x68
 8000af2:	e7d9      	b.n	8000aa8 <__sfp+0x1c>
 8000af4:	2104      	movs	r1, #4
 8000af6:	4638      	mov	r0, r7
 8000af8:	f7ff ff62 	bl	80009c0 <__sfmoreglue>
 8000afc:	4604      	mov	r4, r0
 8000afe:	6030      	str	r0, [r6, #0]
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d1d5      	bne.n	8000ab0 <__sfp+0x24>
 8000b04:	f7ff ff78 	bl	80009f8 <__sfp_lock_release>
 8000b08:	230c      	movs	r3, #12
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	e7ee      	b.n	8000aec <__sfp+0x60>
 8000b0e:	bf00      	nop
 8000b10:	08000fac 	.word	0x08000fac
 8000b14:	ffff0001 	.word	0xffff0001

08000b18 <_fwalk_reent>:
 8000b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b24:	2700      	movs	r7, #0
 8000b26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b2a:	f1b9 0901 	subs.w	r9, r9, #1
 8000b2e:	d505      	bpl.n	8000b3c <_fwalk_reent+0x24>
 8000b30:	6824      	ldr	r4, [r4, #0]
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d1f7      	bne.n	8000b26 <_fwalk_reent+0xe>
 8000b36:	4638      	mov	r0, r7
 8000b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b3c:	89ab      	ldrh	r3, [r5, #12]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d907      	bls.n	8000b52 <_fwalk_reent+0x3a>
 8000b42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b46:	3301      	adds	r3, #1
 8000b48:	d003      	beq.n	8000b52 <_fwalk_reent+0x3a>
 8000b4a:	4629      	mov	r1, r5
 8000b4c:	4630      	mov	r0, r6
 8000b4e:	47c0      	blx	r8
 8000b50:	4307      	orrs	r7, r0
 8000b52:	3568      	adds	r5, #104	; 0x68
 8000b54:	e7e9      	b.n	8000b2a <_fwalk_reent+0x12>

08000b56 <__retarget_lock_init_recursive>:
 8000b56:	4770      	bx	lr

08000b58 <__retarget_lock_acquire_recursive>:
 8000b58:	4770      	bx	lr

08000b5a <__retarget_lock_release_recursive>:
 8000b5a:	4770      	bx	lr

08000b5c <__swhatbuf_r>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	460e      	mov	r6, r1
 8000b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b64:	2900      	cmp	r1, #0
 8000b66:	b096      	sub	sp, #88	; 0x58
 8000b68:	4614      	mov	r4, r2
 8000b6a:	461d      	mov	r5, r3
 8000b6c:	da08      	bge.n	8000b80 <__swhatbuf_r+0x24>
 8000b6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	602a      	str	r2, [r5, #0]
 8000b76:	061a      	lsls	r2, r3, #24
 8000b78:	d410      	bmi.n	8000b9c <__swhatbuf_r+0x40>
 8000b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7e:	e00e      	b.n	8000b9e <__swhatbuf_r+0x42>
 8000b80:	466a      	mov	r2, sp
 8000b82:	f000 f9a7 	bl	8000ed4 <_fstat_r>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	dbf1      	blt.n	8000b6e <__swhatbuf_r+0x12>
 8000b8a:	9a01      	ldr	r2, [sp, #4]
 8000b8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b94:	425a      	negs	r2, r3
 8000b96:	415a      	adcs	r2, r3
 8000b98:	602a      	str	r2, [r5, #0]
 8000b9a:	e7ee      	b.n	8000b7a <__swhatbuf_r+0x1e>
 8000b9c:	2340      	movs	r3, #64	; 0x40
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	6023      	str	r3, [r4, #0]
 8000ba2:	b016      	add	sp, #88	; 0x58
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ba8 <__smakebuf_r>:
 8000ba8:	898b      	ldrh	r3, [r1, #12]
 8000baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bac:	079d      	lsls	r5, r3, #30
 8000bae:	4606      	mov	r6, r0
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	d507      	bpl.n	8000bc4 <__smakebuf_r+0x1c>
 8000bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000bb8:	6023      	str	r3, [r4, #0]
 8000bba:	6123      	str	r3, [r4, #16]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	6163      	str	r3, [r4, #20]
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	ab01      	add	r3, sp, #4
 8000bc6:	466a      	mov	r2, sp
 8000bc8:	f7ff ffc8 	bl	8000b5c <__swhatbuf_r>
 8000bcc:	9900      	ldr	r1, [sp, #0]
 8000bce:	4605      	mov	r5, r0
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	f000 f895 	bl	8000d00 <_malloc_r>
 8000bd6:	b948      	cbnz	r0, 8000bec <__smakebuf_r+0x44>
 8000bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bdc:	059a      	lsls	r2, r3, #22
 8000bde:	d4ef      	bmi.n	8000bc0 <__smakebuf_r+0x18>
 8000be0:	f023 0303 	bic.w	r3, r3, #3
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	81a3      	strh	r3, [r4, #12]
 8000bea:	e7e3      	b.n	8000bb4 <__smakebuf_r+0xc>
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <__smakebuf_r+0x7c>)
 8000bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	6020      	str	r0, [r4, #0]
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	81a3      	strh	r3, [r4, #12]
 8000bfa:	9b00      	ldr	r3, [sp, #0]
 8000bfc:	6163      	str	r3, [r4, #20]
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	6120      	str	r0, [r4, #16]
 8000c02:	b15b      	cbz	r3, 8000c1c <__smakebuf_r+0x74>
 8000c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f000 f975 	bl	8000ef8 <_isatty_r>
 8000c0e:	b128      	cbz	r0, 8000c1c <__smakebuf_r+0x74>
 8000c10:	89a3      	ldrh	r3, [r4, #12]
 8000c12:	f023 0303 	bic.w	r3, r3, #3
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	81a3      	strh	r3, [r4, #12]
 8000c1c:	89a0      	ldrh	r0, [r4, #12]
 8000c1e:	4305      	orrs	r5, r0
 8000c20:	81a5      	strh	r5, [r4, #12]
 8000c22:	e7cd      	b.n	8000bc0 <__smakebuf_r+0x18>
 8000c24:	080009b5 	.word	0x080009b5

08000c28 <_free_r>:
 8000c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d044      	beq.n	8000cb8 <_free_r+0x90>
 8000c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c32:	9001      	str	r0, [sp, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f1a1 0404 	sub.w	r4, r1, #4
 8000c3a:	bfb8      	it	lt
 8000c3c:	18e4      	addlt	r4, r4, r3
 8000c3e:	f000 f97d 	bl	8000f3c <__malloc_lock>
 8000c42:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <_free_r+0x94>)
 8000c44:	9801      	ldr	r0, [sp, #4]
 8000c46:	6813      	ldr	r3, [r2, #0]
 8000c48:	b933      	cbnz	r3, 8000c58 <_free_r+0x30>
 8000c4a:	6063      	str	r3, [r4, #4]
 8000c4c:	6014      	str	r4, [r2, #0]
 8000c4e:	b003      	add	sp, #12
 8000c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c54:	f000 b978 	b.w	8000f48 <__malloc_unlock>
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	d908      	bls.n	8000c6e <_free_r+0x46>
 8000c5c:	6825      	ldr	r5, [r4, #0]
 8000c5e:	1961      	adds	r1, r4, r5
 8000c60:	428b      	cmp	r3, r1
 8000c62:	bf01      	itttt	eq
 8000c64:	6819      	ldreq	r1, [r3, #0]
 8000c66:	685b      	ldreq	r3, [r3, #4]
 8000c68:	1949      	addeq	r1, r1, r5
 8000c6a:	6021      	streq	r1, [r4, #0]
 8000c6c:	e7ed      	b.n	8000c4a <_free_r+0x22>
 8000c6e:	461a      	mov	r2, r3
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	b10b      	cbz	r3, 8000c78 <_free_r+0x50>
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d9fa      	bls.n	8000c6e <_free_r+0x46>
 8000c78:	6811      	ldr	r1, [r2, #0]
 8000c7a:	1855      	adds	r5, r2, r1
 8000c7c:	42a5      	cmp	r5, r4
 8000c7e:	d10b      	bne.n	8000c98 <_free_r+0x70>
 8000c80:	6824      	ldr	r4, [r4, #0]
 8000c82:	4421      	add	r1, r4
 8000c84:	1854      	adds	r4, r2, r1
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	6011      	str	r1, [r2, #0]
 8000c8a:	d1e0      	bne.n	8000c4e <_free_r+0x26>
 8000c8c:	681c      	ldr	r4, [r3, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	6053      	str	r3, [r2, #4]
 8000c92:	4421      	add	r1, r4
 8000c94:	6011      	str	r1, [r2, #0]
 8000c96:	e7da      	b.n	8000c4e <_free_r+0x26>
 8000c98:	d902      	bls.n	8000ca0 <_free_r+0x78>
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	6003      	str	r3, [r0, #0]
 8000c9e:	e7d6      	b.n	8000c4e <_free_r+0x26>
 8000ca0:	6825      	ldr	r5, [r4, #0]
 8000ca2:	1961      	adds	r1, r4, r5
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	bf04      	itt	eq
 8000ca8:	6819      	ldreq	r1, [r3, #0]
 8000caa:	685b      	ldreq	r3, [r3, #4]
 8000cac:	6063      	str	r3, [r4, #4]
 8000cae:	bf04      	itt	eq
 8000cb0:	1949      	addeq	r1, r1, r5
 8000cb2:	6021      	streq	r1, [r4, #0]
 8000cb4:	6054      	str	r4, [r2, #4]
 8000cb6:	e7ca      	b.n	8000c4e <_free_r+0x26>
 8000cb8:	b003      	add	sp, #12
 8000cba:	bd30      	pop	{r4, r5, pc}
 8000cbc:	20000088 	.word	0x20000088

08000cc0 <sbrk_aligned>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	4e0e      	ldr	r6, [pc, #56]	; (8000cfc <sbrk_aligned+0x3c>)
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	6831      	ldr	r1, [r6, #0]
 8000cc8:	4605      	mov	r5, r0
 8000cca:	b911      	cbnz	r1, 8000cd2 <sbrk_aligned+0x12>
 8000ccc:	f000 f88c 	bl	8000de8 <_sbrk_r>
 8000cd0:	6030      	str	r0, [r6, #0]
 8000cd2:	4621      	mov	r1, r4
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	f000 f887 	bl	8000de8 <_sbrk_r>
 8000cda:	1c43      	adds	r3, r0, #1
 8000cdc:	d00a      	beq.n	8000cf4 <sbrk_aligned+0x34>
 8000cde:	1cc4      	adds	r4, r0, #3
 8000ce0:	f024 0403 	bic.w	r4, r4, #3
 8000ce4:	42a0      	cmp	r0, r4
 8000ce6:	d007      	beq.n	8000cf8 <sbrk_aligned+0x38>
 8000ce8:	1a21      	subs	r1, r4, r0
 8000cea:	4628      	mov	r0, r5
 8000cec:	f000 f87c 	bl	8000de8 <_sbrk_r>
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	d101      	bne.n	8000cf8 <sbrk_aligned+0x38>
 8000cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
 8000cfc:	2000008c 	.word	0x2000008c

08000d00 <_malloc_r>:
 8000d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d04:	1ccd      	adds	r5, r1, #3
 8000d06:	f025 0503 	bic.w	r5, r5, #3
 8000d0a:	3508      	adds	r5, #8
 8000d0c:	2d0c      	cmp	r5, #12
 8000d0e:	bf38      	it	cc
 8000d10:	250c      	movcc	r5, #12
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	4607      	mov	r7, r0
 8000d16:	db01      	blt.n	8000d1c <_malloc_r+0x1c>
 8000d18:	42a9      	cmp	r1, r5
 8000d1a:	d905      	bls.n	8000d28 <_malloc_r+0x28>
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	2600      	movs	r6, #0
 8000d22:	4630      	mov	r0, r6
 8000d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d28:	4e2e      	ldr	r6, [pc, #184]	; (8000de4 <_malloc_r+0xe4>)
 8000d2a:	f000 f907 	bl	8000f3c <__malloc_lock>
 8000d2e:	6833      	ldr	r3, [r6, #0]
 8000d30:	461c      	mov	r4, r3
 8000d32:	bb34      	cbnz	r4, 8000d82 <_malloc_r+0x82>
 8000d34:	4629      	mov	r1, r5
 8000d36:	4638      	mov	r0, r7
 8000d38:	f7ff ffc2 	bl	8000cc0 <sbrk_aligned>
 8000d3c:	1c43      	adds	r3, r0, #1
 8000d3e:	4604      	mov	r4, r0
 8000d40:	d14d      	bne.n	8000dde <_malloc_r+0xde>
 8000d42:	6834      	ldr	r4, [r6, #0]
 8000d44:	4626      	mov	r6, r4
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d140      	bne.n	8000dcc <_malloc_r+0xcc>
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	4638      	mov	r0, r7
 8000d50:	eb04 0803 	add.w	r8, r4, r3
 8000d54:	f000 f848 	bl	8000de8 <_sbrk_r>
 8000d58:	4580      	cmp	r8, r0
 8000d5a:	d13a      	bne.n	8000dd2 <_malloc_r+0xd2>
 8000d5c:	6821      	ldr	r1, [r4, #0]
 8000d5e:	3503      	adds	r5, #3
 8000d60:	1a6d      	subs	r5, r5, r1
 8000d62:	f025 0503 	bic.w	r5, r5, #3
 8000d66:	3508      	adds	r5, #8
 8000d68:	2d0c      	cmp	r5, #12
 8000d6a:	bf38      	it	cc
 8000d6c:	250c      	movcc	r5, #12
 8000d6e:	4629      	mov	r1, r5
 8000d70:	4638      	mov	r0, r7
 8000d72:	f7ff ffa5 	bl	8000cc0 <sbrk_aligned>
 8000d76:	3001      	adds	r0, #1
 8000d78:	d02b      	beq.n	8000dd2 <_malloc_r+0xd2>
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	442b      	add	r3, r5
 8000d7e:	6023      	str	r3, [r4, #0]
 8000d80:	e00e      	b.n	8000da0 <_malloc_r+0xa0>
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	1b52      	subs	r2, r2, r5
 8000d86:	d41e      	bmi.n	8000dc6 <_malloc_r+0xc6>
 8000d88:	2a0b      	cmp	r2, #11
 8000d8a:	d916      	bls.n	8000dba <_malloc_r+0xba>
 8000d8c:	1961      	adds	r1, r4, r5
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	6025      	str	r5, [r4, #0]
 8000d92:	bf18      	it	ne
 8000d94:	6059      	strne	r1, [r3, #4]
 8000d96:	6863      	ldr	r3, [r4, #4]
 8000d98:	bf08      	it	eq
 8000d9a:	6031      	streq	r1, [r6, #0]
 8000d9c:	5162      	str	r2, [r4, r5]
 8000d9e:	604b      	str	r3, [r1, #4]
 8000da0:	4638      	mov	r0, r7
 8000da2:	f104 060b 	add.w	r6, r4, #11
 8000da6:	f000 f8cf 	bl	8000f48 <__malloc_unlock>
 8000daa:	f026 0607 	bic.w	r6, r6, #7
 8000dae:	1d23      	adds	r3, r4, #4
 8000db0:	1af2      	subs	r2, r6, r3
 8000db2:	d0b6      	beq.n	8000d22 <_malloc_r+0x22>
 8000db4:	1b9b      	subs	r3, r3, r6
 8000db6:	50a3      	str	r3, [r4, r2]
 8000db8:	e7b3      	b.n	8000d22 <_malloc_r+0x22>
 8000dba:	6862      	ldr	r2, [r4, #4]
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	bf0c      	ite	eq
 8000dc0:	6032      	streq	r2, [r6, #0]
 8000dc2:	605a      	strne	r2, [r3, #4]
 8000dc4:	e7ec      	b.n	8000da0 <_malloc_r+0xa0>
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	6864      	ldr	r4, [r4, #4]
 8000dca:	e7b2      	b.n	8000d32 <_malloc_r+0x32>
 8000dcc:	4634      	mov	r4, r6
 8000dce:	6876      	ldr	r6, [r6, #4]
 8000dd0:	e7b9      	b.n	8000d46 <_malloc_r+0x46>
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4638      	mov	r0, r7
 8000dd8:	f000 f8b6 	bl	8000f48 <__malloc_unlock>
 8000ddc:	e7a1      	b.n	8000d22 <_malloc_r+0x22>
 8000dde:	6025      	str	r5, [r4, #0]
 8000de0:	e7de      	b.n	8000da0 <_malloc_r+0xa0>
 8000de2:	bf00      	nop
 8000de4:	20000088 	.word	0x20000088

08000de8 <_sbrk_r>:
 8000de8:	b538      	push	{r3, r4, r5, lr}
 8000dea:	4d06      	ldr	r5, [pc, #24]	; (8000e04 <_sbrk_r+0x1c>)
 8000dec:	2300      	movs	r3, #0
 8000dee:	4604      	mov	r4, r0
 8000df0:	4608      	mov	r0, r1
 8000df2:	602b      	str	r3, [r5, #0]
 8000df4:	f7ff fa9e 	bl	8000334 <_sbrk>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d102      	bne.n	8000e02 <_sbrk_r+0x1a>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	b103      	cbz	r3, 8000e02 <_sbrk_r+0x1a>
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	20000090 	.word	0x20000090

08000e08 <__sread>:
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e10:	f000 f8a0 	bl	8000f54 <_read_r>
 8000e14:	2800      	cmp	r0, #0
 8000e16:	bfab      	itete	ge
 8000e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8000e1c:	181b      	addge	r3, r3, r0
 8000e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e22:	bfac      	ite	ge
 8000e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e26:	81a3      	strhlt	r3, [r4, #12]
 8000e28:	bd10      	pop	{r4, pc}

08000e2a <__swrite>:
 8000e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2e:	461f      	mov	r7, r3
 8000e30:	898b      	ldrh	r3, [r1, #12]
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	4605      	mov	r5, r0
 8000e36:	460c      	mov	r4, r1
 8000e38:	4616      	mov	r6, r2
 8000e3a:	d505      	bpl.n	8000e48 <__swrite+0x1e>
 8000e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e40:	2302      	movs	r3, #2
 8000e42:	2200      	movs	r2, #0
 8000e44:	f000 f868 	bl	8000f18 <_lseek_r>
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e52:	81a3      	strh	r3, [r4, #12]
 8000e54:	4632      	mov	r2, r6
 8000e56:	463b      	mov	r3, r7
 8000e58:	4628      	mov	r0, r5
 8000e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e5e:	f000 b817 	b.w	8000e90 <_write_r>

08000e62 <__sseek>:
 8000e62:	b510      	push	{r4, lr}
 8000e64:	460c      	mov	r4, r1
 8000e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e6a:	f000 f855 	bl	8000f18 <_lseek_r>
 8000e6e:	1c43      	adds	r3, r0, #1
 8000e70:	89a3      	ldrh	r3, [r4, #12]
 8000e72:	bf15      	itete	ne
 8000e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e7e:	81a3      	strheq	r3, [r4, #12]
 8000e80:	bf18      	it	ne
 8000e82:	81a3      	strhne	r3, [r4, #12]
 8000e84:	bd10      	pop	{r4, pc}

08000e86 <__sclose>:
 8000e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e8a:	f000 b813 	b.w	8000eb4 <_close_r>
	...

08000e90 <_write_r>:
 8000e90:	b538      	push	{r3, r4, r5, lr}
 8000e92:	4d07      	ldr	r5, [pc, #28]	; (8000eb0 <_write_r+0x20>)
 8000e94:	4604      	mov	r4, r0
 8000e96:	4608      	mov	r0, r1
 8000e98:	4611      	mov	r1, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	602a      	str	r2, [r5, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f7ff f9f7 	bl	8000292 <_write>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d102      	bne.n	8000eae <_write_r+0x1e>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	b103      	cbz	r3, 8000eae <_write_r+0x1e>
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	20000090 	.word	0x20000090

08000eb4 <_close_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4d06      	ldr	r5, [pc, #24]	; (8000ed0 <_close_r+0x1c>)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	602b      	str	r3, [r5, #0]
 8000ec0:	f7ff fa03 	bl	80002ca <_close>
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	d102      	bne.n	8000ece <_close_r+0x1a>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	b103      	cbz	r3, 8000ece <_close_r+0x1a>
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	20000090 	.word	0x20000090

08000ed4 <_fstat_r>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4d07      	ldr	r5, [pc, #28]	; (8000ef4 <_fstat_r+0x20>)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	602b      	str	r3, [r5, #0]
 8000ee2:	f7ff f9fe 	bl	80002e2 <_fstat>
 8000ee6:	1c43      	adds	r3, r0, #1
 8000ee8:	d102      	bne.n	8000ef0 <_fstat_r+0x1c>
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	b103      	cbz	r3, 8000ef0 <_fstat_r+0x1c>
 8000eee:	6023      	str	r3, [r4, #0]
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000090 	.word	0x20000090

08000ef8 <_isatty_r>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	4d06      	ldr	r5, [pc, #24]	; (8000f14 <_isatty_r+0x1c>)
 8000efc:	2300      	movs	r3, #0
 8000efe:	4604      	mov	r4, r0
 8000f00:	4608      	mov	r0, r1
 8000f02:	602b      	str	r3, [r5, #0]
 8000f04:	f7ff f9fd 	bl	8000302 <_isatty>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	d102      	bne.n	8000f12 <_isatty_r+0x1a>
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	b103      	cbz	r3, 8000f12 <_isatty_r+0x1a>
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	20000090 	.word	0x20000090

08000f18 <_lseek_r>:
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4d07      	ldr	r5, [pc, #28]	; (8000f38 <_lseek_r+0x20>)
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4611      	mov	r1, r2
 8000f22:	2200      	movs	r2, #0
 8000f24:	602a      	str	r2, [r5, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	f7ff f9f6 	bl	8000318 <_lseek>
 8000f2c:	1c43      	adds	r3, r0, #1
 8000f2e:	d102      	bne.n	8000f36 <_lseek_r+0x1e>
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	b103      	cbz	r3, 8000f36 <_lseek_r+0x1e>
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
 8000f38:	20000090 	.word	0x20000090

08000f3c <__malloc_lock>:
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <__malloc_lock+0x8>)
 8000f3e:	f7ff be0b 	b.w	8000b58 <__retarget_lock_acquire_recursive>
 8000f42:	bf00      	nop
 8000f44:	20000084 	.word	0x20000084

08000f48 <__malloc_unlock>:
 8000f48:	4801      	ldr	r0, [pc, #4]	; (8000f50 <__malloc_unlock+0x8>)
 8000f4a:	f7ff be06 	b.w	8000b5a <__retarget_lock_release_recursive>
 8000f4e:	bf00      	nop
 8000f50:	20000084 	.word	0x20000084

08000f54 <_read_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4d07      	ldr	r5, [pc, #28]	; (8000f74 <_read_r+0x20>)
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	602a      	str	r2, [r5, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff f978 	bl	8000258 <_read>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_read_r+0x1e>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_read_r+0x1e>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	20000090 	.word	0x20000090

08000f78 <_init>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr

08000f84 <_fini>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr
